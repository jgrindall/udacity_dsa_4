#Test tiny

>>> from maps.Graph_2 import Graph_2
>>> from algo import Dfs, AStar, Dijkstra, ShortestPath
>>> graph = Graph_2()
>>> expected_ans = ShortestPath(1.0, [0, 1])
>>> dfs = Dfs(graph)
>>> dfs.shortest_path(0, 1) == expected_ans
True
>>> dijk = Dijkstra(graph)
>>> dijk.shortest_path(0, 1) == expected_ans
True
>>> a_star = AStar(graph)
>>> a_star.shortest_path(0, 1) == expected_ans
True
>>> expected_ans = ShortestPath(0.0, [0])
>>> dfs.shortest_path(0, 0) == expected_ans
True
>>> dijk.shortest_path(0, 0) == expected_ans
True
>>> a_star.shortest_path(0, 0) == expected_ans
True


#Test tiny - start equals goal
>>> from maps.Graph_2 import Graph_2
>>> from algo import Dfs, AStar, Dijkstra, ShortestPath
>>> graph = Graph_2()
>>> dfs = Dfs(graph)
>>> dijk = Dijkstra(graph)
>>> a_star = AStar(graph)
>>> expected_ans = ShortestPath(0.0, [0])
>>> dfs.shortest_path(0, 0) == expected_ans
True
>>> dijk.shortest_path(0, 0) == expected_ans
True
>>> a_star.shortest_path(0, 0) == expected_ans
True



#Test singular - one city
>>> from maps.Graph_1 import Graph_1
>>> from algo import Dfs, AStar, Dijkstra, ShortestPath
>>> graph = Graph_1()
>>> dfs = Dfs(graph)
>>> dijk = Dijkstra(graph)
>>> a_star = AStar(graph)
>>> expected_ans = ShortestPath(0.0, [0])
>>> dfs.shortest_path(0, 0) == expected_ans
True
>>> dijk.shortest_path(0, 0) == expected_ans
True
>>> a_star.shortest_path(0, 0) == expected_ans
True



#Test disconnected
>>> from maps.Graph_2_disconnected import Graph_2_disconnected
>>> from algo import Dfs, AStar, Dijkstra, ShortestPath
>>> graph = Graph_2_disconnected()
>>> dfs = Dfs(graph)
>>> dijk = Dijkstra(graph)
>>> a_star = AStar(graph)
>>> expected_ans = ShortestPath(0.0, [0])
>>> dfs.shortest_path(0, 0) == expected_ans
True
>>> dijk.shortest_path(0, 0) == expected_ans
True
>>> a_star.shortest_path(0, 0) == expected_ans
True
>>> expected_ans = ShortestPath()
>>> dfs.shortest_path(1, 0) == expected_ans
True
>>> dijk.shortest_path(1, 0) == expected_ans
True
>>> a_star.shortest_path(1, 0) == expected_ans
True
>>> expected_ans = ShortestPath()
>>> dfs.shortest_path(0, 1) == expected_ans
True
>>> dijk.shortest_path(0, 1) == expected_ans
True
>>> a_star.shortest_path(0, 1) == expected_ans
True




#Test Romania map from lectures, Arad->Arad
>>> from maps.Graph_12_romania import Graph_12_romania
>>> from algo import Dfs, AStar, Dijkstra, ShortestPath
>>> graph = Graph_12_romania()
>>> dfs = Dfs(graph)
>>> dijk = Dijkstra(graph)
>>> a_star = AStar(graph)
>>> expected_ans = ShortestPath(0.0, [0])
>>> dfs.shortest_path(0, 0) == expected_ans
True
>>> dijk = Dijkstra(graph)
>>> dijk.shortest_path(0, 0) == expected_ans
True
>>> a_star = AStar(graph)
>>> a_star.shortest_path(0, 0) == expected_ans
True




#Test Romania map from lectures, Arad->Bucharest
>>> from maps.Graph_12_romania import Graph_12_romania
>>> from algo import Dfs, AStar, Dijkstra, ShortestPath
>>> graph = Graph_12_romania()
>>> dfs = Dfs(graph)
>>> dijk = Dijkstra(graph)
>>> a_star = AStar(graph)
>>> expected_ans = ShortestPath(418.0, [0, 7, 8, 11, 12])
>>> dfs.shortest_path(0, 12) == expected_ans
True
>>> dijk = Dijkstra(graph)
>>> dijk.shortest_path(0, 12) == expected_ans
True
>>> a_star = AStar(graph)
>>> a_star.shortest_path(0, 12) == expected_ans
True





#Test Simple map
>>> from maps.Graph_4 import Graph_4
>>> from algo import Dfs, AStar, Dijkstra, ShortestPath
>>> graph = Graph_4()
>>> dfs = Dfs(graph)
>>> dijk = Dijkstra(graph)
>>> a_star = AStar(graph)
>>> expected_ans = ShortestPath(0.0, [0])
>>> dfs.shortest_path(0, 0) == expected_ans
True
>>> dijk = Dijkstra(graph)
>>> dijk.shortest_path(0, 0) == expected_ans
True
>>> a_star.shortest_path(0, 0) == expected_ans
True
>>> expected_ans =ShortestPath(15.0, [0, 1])
>>> dfs.shortest_path(0, 1) == expected_ans
True
>>> dijk.shortest_path(0, 1) == expected_ans
True
>>> a_star = AStar(graph)
>>> a_star.shortest_path(0, 1) == expected_ans
True
>>> expected_ans = ShortestPath()
>>> dfs.shortest_path(0, 2) == expected_ans
True
>>> dijk.shortest_path(0, 2) == expected_ans
True
>>> a_star.shortest_path(0, 2) == expected_ans
True
>>> expected_ans = ShortestPath(45.0, [0, 1, 4, 3])
>>> dfs.shortest_path(0, 3) == expected_ans
True
>>> dijk.shortest_path(0, 3) == expected_ans
True
>>> a_star.shortest_path(0, 3) == expected_ans
True
>>> expected_ans = ShortestPath(25.0, [0, 1, 4])
>>> dfs.shortest_path(0, 4) == expected_ans
True
>>> dijk.shortest_path(0, 4) == expected_ans
True
>>> a_star.shortest_path(0, 4) == expected_ans
True



#Test Map 6
>>> from maps.Graph_6 import Graph_6
>>> from algo import Dfs, AStar, Dijkstra, ShortestPath
>>> graph = Graph_6()
>>> dfs = Dfs(graph)
>>> dijk = Dijkstra(graph)
>>> a_star = AStar(graph)
>>> failed_tests = []
>>> for i in range(0, len(graph.cities)):
...   for j in range(0, 6):
...      a1 = dfs.shortest_path(i, j)
...      a2 = dijk.shortest_path(i, j)
...      a3 = a_star.shortest_path(i, j)
...      if a1.length != a2.length or a2.length != a3.length:
...         failed_tests.append([i, j, a1, a2, a3])
>>> print(failed_tests)
[]



#Test Map 10
>>> from maps.Graph_10 import Graph_10
>>> from algo import Dfs, AStar, Dijkstra, ShortestPath
>>> graph = Graph_10()
>>> dfs = Dfs(graph)
>>> dijk = Dijkstra(graph)
>>> a_star = AStar(graph)
>>> failed_tests = []
>>> for i in range(0, len(graph.cities)):
...   for j in range(0, len(graph.cities)):
...      a1 = dfs.shortest_path(i, j)
...      a2 = dijk.shortest_path(i, j)
...      a3 = a_star.shortest_path(i, j)
...      if a1.length != a2.length or a2.length != a3.length:
...         failed_tests.append([i, j, a1, a2, a3])
>>> print(failed_tests)
[]




#Test Map 40
>>> from maps.Graph_40 import Graph_40
>>> from algo import Dfs, AStar, Dijkstra, ShortestPath
>>> graph = Graph_40()
>>> dijk = Dijkstra(graph)
>>> a_star = AStar(graph)
>>> failed_tests = []
>>> for i in range(0, len(graph.cities)):
...   for j in range(0, len(graph.cities)):
...      a1 = dijk.shortest_path(i, j)
...      a2 = a_star.shortest_path(i, j)
...      if a1.length != a2.length:
...         failed_tests.append([i, j, a1, a2])
>>> print(failed_tests)
[]



#Test Map 1000 (note this one is random, so will be testing different graphs each time)
>>> from maps.Graph_1000 import Graph_1000
>>> from algo import Dfs, AStar, Dijkstra, ShortestPath
>>> import random
>>> graph = Graph_1000()
>>> dijk = Dijkstra(graph)
>>> a_star = AStar(graph)
>>> failed_tests = []
>>> num_runs = 50
>>> for n in range(num_runs):
...   i = random.randint(0, len(graph.cities))
...   j = random.randint(0, len(graph.cities))
...   a1 = dijk.shortest_path(i, j)
...   a2 = a_star.shortest_path(i, j)
...   if a1.length != a2.length:
...      failed_tests.append([i, j, a1, a2])
>>> print(failed_tests)
[]





